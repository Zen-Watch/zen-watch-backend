CREATE TABLE event_evm_transaction (
    id VARCHAR(36) NOT NULL,
    event_type VARCHAR(500) NOT NULL,
    dev_id INT NOT NULL,
    api_worker_shard_id INT NOT NULL,
    event_status INT NOT NULL,
    event_json JSON NOT NULL,
    backfill_json JSON NOT NULL,
    wallet_address VARCHAR(500) GENERATED ALWAYS AS (event_json->>'$.wallet_address'),
    txn_hash VARCHAR(500) GENERATED ALWAYS AS (event_json->>'$.event_properties.txn_hash'),
    txn_type INT GENERATED ALWAYS AS (backfill_json->'$.txn_type'),
    txn_status INT GENERATED ALWAYS AS (backfill_json->'$.txn_status'),
    to_address VARCHAR(500) GENERATED ALWAYS AS (backfill_json->>'$.to_address'),
    contractAddress VARCHAR(500) GENERATED ALWAYS AS (backfill_json->>'$.contractAddress'),
    confirmations BIGINT GENERATED ALWAYS AS (backfill_json->'$.confirmations'),
    blockNumber BIGINT GENERATED ALWAYS AS (backfill_json->'$.blockNumber'),
    blockHash VARCHAR(500) GENERATED ALWAYS AS (backfill_json->>'$.blockHash'),
    exchange_rate DOUBLE GENERATED ALWAYS AS (backfill_json->'$.exchange_rate'),
    exchange_currency VARCHAR(50) GENERATED ALWAYS AS (backfill_json->>'$.exchange_currency'),
    block_timestamp BIGINT GENERATED ALWAYS AS (backfill_json->'$.blockTimestamp'),
    block_timestamp_ts TIMESTAMP GENERATED ALWAYS AS (FROM_UNIXTIME(block_timestamp)),
    txn_savings DOUBLE GENERATED ALWAYS AS (backfill_json->'$.txn_savings'),
    txn_savings_fiat DOUBLE GENERATED ALWAYS AS (backfill_json->'$.txn_savings_fiat'),
    txn_value DOUBLE GENERATED ALWAYS AS (backfill_json->'$.txn_value'),
    txn_value_fiat DOUBLE GENERATED ALWAYS AS (backfill_json->'$.txn_value_fiat'),
    final_txn_fee DOUBLE GENERATED ALWAYS AS (backfill_json->'$.final_txn_fee'),
    final_txn_fee_fiat DOUBLE GENERATED ALWAYS AS (backfill_json->'$.final_txn_fee_fiat'),
    app_txn_tag VARCHAR(500) GENERATED ALWAYS AS (backfill_json->>'$.app_txn_tag'),
    app_charge_incl_txn_cost DOUBLE GENERATED ALWAYS AS (backfill_json->'$.app_charge_incl_txn_cost'),
    app_charge_incl_txn_cost_fiat DOUBLE GENERATED ALWAYS AS (backfill_json->'$.app_charge_incl_txn_cost_fiat'),
    app_profit_loss_from_charge_incl_txn_cost DOUBLE GENERATED ALWAYS AS (backfill_json->'$.app_profit_loss_from_charge_incl_txn_cost'),
    app_profit_loss_from_charge_incl_txn_cost_fiat DOUBLE GENERATED ALWAYS AS (backfill_json->'$.app_profit_loss_from_charge_incl_txn_cost_fiat'),
    app_charge_excl_txn_cost DOUBLE GENERATED ALWAYS AS (backfill_json->'$.app_charge_excl_txn_cost'),
    app_charge_excl_txn_cost_fiat DOUBLE GENERATED ALWAYS AS (backfill_json->'$.app_charge_excl_txn_cost_fiat'),
    app_total_profit_loss DOUBLE GENERATED ALWAYS AS (backfill_json->'$.app_total_profit_loss'),
    app_total_profit_loss_fiat DOUBLE GENERATED ALWAYS AS (backfill_json->'$.app_total_profit_loss_fiat'),
    is_smart_contract_call BOOLEAN GENERATED ALWAYS AS (backfill_json->'$.is_sc_call'),
    country VARCHAR(500) GENERATED ALWAYS AS (backfill_json->>'$.environment_details_country'),
    platform VARCHAR(500) GENERATED ALWAYS AS (backfill_json->>'$.environment_details_platform'),
    city VARCHAR(500) GENERATED ALWAYS AS (backfill_json->>'$.environment_details_city'),
    gas_used DOUBLE GENERATED ALWAYS AS (backfill_json->'$.gasUsed'),
    effective_gas_price DOUBLE GENERATED ALWAYS AS (backfill_json->'$.effectiveGasPrice'),
    gas_limit DOUBLE GENERATED ALWAYS AS (backfill_json->'$.gasLimit'),
    base_fee DOUBLE GENERATED ALWAYS AS (backfill_json->'$.base_fee'),
    gas_price DOUBLE GENERATED ALWAYS AS (backfill_json->'$.gasPrice'),
    max_priority_fee_per_gas DOUBLE GENERATED ALWAYS AS (backfill_json->'$.maxPriorityFeePerGas'),
    max_fee_per_gas DOUBLE GENERATED ALWAYS AS (backfill_json->'$.maxFeePerGas'),
    gas_savings DOUBLE GENERATED ALWAYS AS (backfill_json->'$.gas_savings'),
    used_gas_ratio DOUBLE GENERATED ALWAYS AS (backfill_json->'$.used_gas_ratio'),
    created_ts TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_ts TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    PRIMARY KEY(id),
    INDEX EEVMT_AWSI (api_worker_shard_id ASC),
    INDEX EEVMT_ET (event_type ASC),
    INDEX EEVMT_STS (event_status ASC),
    INDEX EEVMT_CTS (created_ts ASC),
    INDEX EEVMT_UTS (updated_ts ASC),
    INDEX EEVMT_WA (wallet_address ASC),
    INDEX EEVMT_TA (to_address ASC),
    INDEX EEVMT_CONA (contractAddress ASC),
    INDEX EEVMT_TH (txn_hash ASC),
    INDEX EEVMT_TS (txn_status ASC),
    INDEX EEVMT_ISCC (is_smart_contract_call ASC),
    INDEX EEVMT_BTS (block_timestamp ASC),
    INDEX EEVMT_EC (exchange_currency ASC),
    INDEX EEVMT_ATT (app_txn_tag ASC),
    INDEX EEVMT_BN (blockNumber ASC),
    INDEX EEVMT_BH (blockHash ASC),
    INDEX EEVMT_CTY (country ASC),
    INDEX EEVMT_PLT (platform ASC),
    CONSTRAINT EAK_FK FOREIGN KEY(dev_id) REFERENCES developer(id) ON DELETE RESTRICT ON UPDATE CASCADE
);